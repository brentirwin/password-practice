{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChangePassword","e","setState","password","target","value","handleChangeText","text","state","correct","error","startsWith","streak","handleEnter","key","handleAdvanced","advanced","checked","startingForm","React","createRef","bind","assertThisInitialized","current","focus","style","color","backgroundColor","borderColor","boxShadow","_this2","react_default","a","createElement","className","id","onChange","autoCorrect","autoCapitalize","ref","type","textBoxStyle","onKeyPress","name","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.642929c7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      password: '',\n      text: '',\n      correct: false,\n      error: false,\n      streak: 0,\n      advanced: false\n    }\n\n    this.startingForm = React.createRef();\n\n    this.handleChangePassword = this.handleChangePassword.bind(this);\n    this.handleChangeText = this.handleChangeText.bind(this);\n    this.handleEnter = this.handleEnter.bind(this);\n    this.handleAdvanced = this.handleAdvanced.bind(this);\n  }\n\n  handleChangePassword = e => this.setState({ password: e.target.value });\n\n  handleChangeText = e => {\n    const text = e.target.value;\n    const password = this.state.password;\n    const correct = text === password;\n    const error = !password.startsWith(text);\n    const streak = correct ? this.state.streak + 1\n                 : error ? 0 : this.state.streak;\n\n    this.setState({\n      text: text,\n      correct: (text === '') ? false : correct,\n      error: error,\n      streak: streak\n    });\n  }\n\n  handleEnter = e => {\n    if (e.key !== 'Enter') return null;\n    \n    this.setState({\n      text: '',\n      correct: false,\n      error: false\n    });\n  }\n\n  handleAdvanced = e => this.setState({\n    advanced: e.target.checked,\n    streak: 0\n  });\n\n  componentDidMount() {\n    this.startingForm.current.focus();\n  }\n\n  textBoxStyle() {\n    const green = '#5cb85c';\n    const red = '#d9534f';\n\n    const style = color => {\n      return {\n        backgroundColor: color + '80',\n        borderColor: color,\n        boxShadow: '0 0 20px ' + color\n      }\n    }\n\n    if (this.state.correct)\n      return style(green);\n    if (this.state.error)\n      return style(red);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Password Memory Tool</h1>\n        <ul id=\"instructions\">\n          <li>Enter your password in the top box.</li>\n          <li>Practice rote memorization in the bottom box.</li>\n          <li id=\"red-text\">Red means you made a boo-boo.</li>\n          <li id=\"green-text\">Green means you got it right.</li>\n          <li>Press enter to reset the bottom box.</li>\n        </ul>\n        <input\n          id=\"password\"\n          value={this.state.password}\n          onChange={e => this.handleChangePassword(e)}\n          autoCorrect=\"off\"\n          autoCapitalize=\"off\"\n          ref={this.startingForm}\n          />\n        <input\n          id=\"text\"\n          type={this.state.advanced ? \"password\" : \"text\"}\n          style={this.textBoxStyle()}\n          value={this.state.text}\n          onChange={e => this.handleChangeText(e)}\n          onKeyPress={e => this.handleEnter(e)}\n          autoCorrect=\"off\"\n          autoCapitalize=\"off\"\n          />\n        <p>Current streak: {this.state.streak}</p>\n        <label>\n          <input\n            name=\"advanced\"\n            type=\"checkbox\"\n            checked={this.state.advanced}\n            onChange={this.handleAdvanced}\n            />\n          Advanced mode\n        </label>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}